import path from 'path';

import Logger from 'logger';

import express from 'express';

import Session from 'session';

import configs from 'configs';

var appConfigs = configs('app');

var logger = Logger.getLogger('preData');



var Storage = require('./preDataStorage.js');


var url = require('url');
var pathToRegexp = require('path-to-regexp');


var server = require(path.resolve('./application'+appConfigs.react.server))||function(){};

String.prototype.hashCode = function() {
	var hash = 0, char;
	try {
		if (this.length == 0) return hash;
		for (var i = 0; i < this.length; i++) {
			char = this.charCodeAt(i);
			hash = ((hash << 5) - hash) + char;
			hash = hash & hash; // Convert to 32bit integer
		}
		return hash;
	} catch (e) {
		throw new Error('hashCode: ' + e);
	}
};



var Request = function(path, source, session = null, method = 'get', body = {}, files = {}) {
	var data = url.parse(source);
	var keys = [];
	var query = {};
	var id = source.hashCode();
	!data.query?0:data.query.split('&').forEach(function(e) {
		try {
			var data = e.split('=');
			if(e.length > 0) {
				query[data[0]] = !data[1] ? null : (!isNaN(parseFloat(data[1])) && isFinite(data[1]) ? parseFloat(data[1]) : decodeURIComponent(data[1]));
			}
		} catch(e) {}
	});
	var re = pathToRegexp(path, keys);
	var params = {};
	var tmp1 = re.exec(data.pathname);
	if(data.pathname !== '\/' && data.pathname !== '' && tmp1) {
		var preParams = re.exec(data.pathname).map(function(e) {return e;})
		for(var i=1;i<preParams.length;i++) {
			var key = keys[i-1].name, val = preParams[i];
			params[key]=val;
		}
	}
	session = typeof session == 'string' ? new Session(session) : session;
	var req = {
		id: id,
		method: method,
		query: query,
		params: params,
		session: session,
		body: body,
		files: files,
		path: data.pathname,
		fullPath: data.path,
		queryString: data.query||''
	}
	return req;
};


class Res {
	constructor(res, next, end, redirect, title) {
		this.__status = 200;
		this.__statusMessage = "";
		this.__res = res;
		this.__redirect = redirect;
		this.__xNext = next;
		this.__next = end;
		this.title = title;
		this.__data = {};
	}
	setStatus(value, message) {
		this.__status = value;
		this.__statusMessage = message || '';
		return this;
	}
	setData(name, data) {
		this.__data[name] = data;
		return this;
	}
	end() {
		this.__res.___res = this;
		this.__next();
	}
	next() {
		this.__res.___res = this;
		this.__xNext();
	}
	redirect(url) {
		this.__redirect(url);
	}
	get data() {
		return this.__data;
	}
}

var Response = function(res, next, end, redirect, title) {
	return new Res(res, next, end, redirect, title);
};

var selectRoute = function(path, routes) {
	path = url.parse(path).pathname;
	return routes.filter(function(e) {
		var re = pathToRegexp(e.path);
		return !!re.exec(path);
	})[0]||null;
};


class PreData {
	constructor(routes) {
		var router = express.Router();
		this.router = router;
		router.post(appConfigs.react.preDataPath||'/preData', (request, response, next)=> {
			try {
				var url = request.body.url;
				var body = {};
				var files = {};
				try {
					body = JSON.parse(request.body.body);
				} catch(e) {
					logger.error(e);
				}
				try {
					files = request.files;
				} catch(e) {
					logger.error(e);
				}
				if(request.___ret) return next();
				var route = selectRoute(url, routes);
				if(route) {
					var res, req;
					var _end = ()=> {
						request.session.session = req.session.export();
						response.json({
							preData: res.data,
							title: res.title,
							id: req.id
						});
					};
					var _next = ()=> {
						route.express(req, res);
					};
					req = Request(route.path, url, request.session.session, 'GET', body, files);
					res = Response(response, _next, _end, _end, route.title);
					request.__ret = {
						req,
						res,
						status: route.status
					};
					server(req, res);
				} else {
					next();
				}
			} catch(e) {
				logger.error(e);
				res.end('500 Internal server error');
			}
		});
		router.use((request, response, next)=> {
			try {
				var url = request.originalUrl;
				var body = {};
				var files = {};
				try {
					body = request.body ? request.body : body;
				} catch (e) {
					logger.error(e);
				}
				try {
					files = request.files;
				} catch (e) {
					logger.error(e);
				}
				if(request.___ret) return next();
				var route = selectRoute(request.originalUrl, routes);
				if(route) {
					var req, res;
					var _end = ()=> {
						next();
					};
					var _redirect = (url)=> {
						request.session.session = req.session.export();
						response.redirect(url);
					};
					var _next = ()=> {
						route.express(req, res);
					};
					req = Request(route.path, url, request.session.session, request.method, body, files);
					res = Response(response, _next, _end, _redirect, route.title);
					request.__ret = {
						req,
						res,
						status: route.status
					};
					server(req, res);
				} else {
					next();
				}
			} catch(e) {
				logger.error(e);
				res.end('500 Internal server error');
			}
		});
	}
	create(data = {}) {
		let id = parseInt(Math.random().toString().substr(2)).toString(32);
		Storage[id] = data;
		return id;
	}
	get(id) {
		let data = Storage[id]||{};
		return data;
	}
	remove(id) {
		let data = this.get(id);
		delete Storage[id];
		return data;
	}
}







module.exports = PreData;
