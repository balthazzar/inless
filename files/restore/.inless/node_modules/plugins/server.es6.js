
import express from 'express';
import configs from 'configs';
import path from 'path';


var list = configs('plugins');


var router = express.Router();

var plugins = {};

var Session = require('./session.js');


class Plugin {
	constructor(parent) {
		this.__parent = parent;
		this.sync = !!this.__parent.sync;
		for(let name in this.__parent) {
			let body = this.__parent[name];
			if(typeof body == 'function') {
				this[name] = (options, session)=> {
					return this.exec(name, options, session);
				};
			}
		};
		this.getPlugin = (name)=> {
			return plugins[name];
		}
	};
	exec(name=null, options=null, session = null) {
		if(this.sync) {
			return this.__parent[name].call(this.__parent, options);
		} else {
			if(session && !session['__isSession']) {
				session = new Session(session);
			}
			var promise = new Promise((resolve, reject)=> {
				if(this.__parent[name] != undefined) {
					this.__parent[name].call(this, options, session, resolve, reject);
				} else {
					reject('not found method');
				};
			});
			return promise;
		}
	};
}


var Singleton = {};


var load = ()=> {
	for (var i in list) {
		if (list.hasOwnProperty(i)) {
			var e = list[i];
			var tmpl = require(path.resolve('./application/plugins/' + i + '/server/index.js'));
			var rpc = require(path.resolve('./application/plugins/' + i + '/client/index.js')).rpc;
			tmpl['name'] = i;
			tmpl['rpc'] = rpc || [];
			var plugin = new Plugin(tmpl);
			plugins[i] = plugin;
		}
	}
	for (var i in list) {
		if (list.hasOwnProperty(i)) {
			var e = list[i];
			var init = plugins[i].__parent.init||function() {};
			// var app = require('plugins/singleton.js').app;
			init.call(plugins[i], router, e);
		}
	}
}


Singleton.__instance = null;

Singleton.__getInstance = function() {
	if(this.__instance === null) {
		load();
		this.list = plugins;
		this.router = router;
		this.__instance = Singleton;
	}
	return this.__instance;
}

module.exports = Singleton.__getInstance();
