
import configs from 'configs';


var list = configs('plugins');

var ___ = function() {
	require('./../../../application/plugins/*/client/**/*.js', { glob: true });
};

var plugins = {};


class Plugin {
	constructor(parent) {
		this.__parent = parent;
		var _$ = this;
		var id = this.__id = typeof parent.name == 'string' ? parent.name : parseInt(+new Date*Math.random()).toString(32);
		this.sync = !!this.__parent.sync;
		for(let name in this.__parent) {
			let body = this.__parent[name];
			if(typeof body == 'function' && name != 'init') {
				this[name] = function(options = {}) {
					return _$.exec(name, options);
				}
			}
		};
		this['getPlugin'] = (name)=> {
			if(typeof plugins[name] != 'undefined') {
				return plugins[name];
			} else {
				return null;
			}
		};
		this['rpc'] = {};
		(parent['rpc']||[]).forEach((name)=> {
			if(name != 'init') {
				this['rpc'][name] = (data = {}, form = false)=> {
					var setting = {};
					if(form || data.constructor.name == 'FormData') {
						setting = {
							method: 'post',
							credentials: 'include',
							body : data
						}
					} else {
						var form = new FormData();
						for(let i in data) {
							form.append(i, data[i]);
						}
						setting = {
							method: 'post',
							credentials: 'include',
							body: form
						}
					}
					var checkStatus = function(response) {
						if (response.status >= 200 && response.status < 300) {
							return response
						} else {
							var error = new Error(response.statusText)
							error.response = response
							throw error
						}
					}
					var parseJSON = function(response) {
						return response.json();
					}
					var lalka = function(response) {
						return new Promise(function(resolve, reject) {
							if(response.error) {
								reject(response.error);
							} else {
								resolve(response.response);
							}
						});
					};
					return fetch(`/rpc/${parent.name}/${name}`, setting).then(parseJSON).then(lalka);
				}
			}
		});
	};
	exec(name=null, options={}) {
		if(this.sync) {
			return this.__parent[name].call(this.__parent, options);
		} else {
			var promise = new Promise((resolve, reject)=> {
				if(this.__parent[name] != undefined) {
					this.__parent[name].call(this, options, (data)=> {
						resolve(data);
					}, (data)=> {
						reject(data);
					});
				} else {
					reject('not found method');
				};
			});
			return promise;
		}
	};
}

var typeid = '__'+parseInt(+new Date*Math.random()).toString(32);

if(!window[typeid]) {
	for (var i in list) {
		if (list.hasOwnProperty(i)) {
			var e = list[i];
			var tmpl = require('./../../../application/plugins/' + i + '/client/index.js');
			tmpl['name'] = i;
			var plugin = new Plugin(tmpl);
			plugins[i] = plugin;
		}
	}
	for (var i in list) {
		if (list.hasOwnProperty(i)) {
			var e = list[i];
			var init = plugins[i].__parent.init||function() {};
			init.call(plugins[i], e);
		}
	}
	window[typeid] = plugins;
	module.exports = plugins;
} else {
	module.exports = window[typeid];
}
