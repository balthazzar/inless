'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _logger = require('logger');

var _logger2 = _interopRequireDefault(_logger);

var _preData = require('preData');

var _preData2 = _interopRequireDefault(_preData);

var _session = require('session');

var _session2 = _interopRequireDefault(_session);

// import createBrowserHistory from 'history/lib/createBrowserHistory';

var express = typeof window == 'undefined' ? require('ex' + 'press') : null;

var React = require('react');
var ReactDOM = require('react-dom/server');
var rRouter = require('react-router');

var logger = _logger2['default'].getLogger('router');

var render = function render(layout, params) {
	var escapeHtml = function escapeHtml(text) {
		var map = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#039;'
		};
		return text.replace(/[&<>"']/g, function (m) {
			return map[m];
		});
	};
	for (var _i in params) {
		var i = params[_i];
		layout = layout.split("%" + _i + "%").join(i);
		layout = layout.split("#" + _i + "#").join(escapeHtml(i));
	}
	return layout.replace(/(\n\s+)/gi, "").replace(/(\n)/gi, "");
};

var Router = (function () {
	function Router() {
		_classCallCheck(this, Router);

		this.routes = [];
	}

	_createClass(Router, [{
		key: 'add',
		value: function add(path, handler, status, title, express) {
			this.routes.push({
				path: path || '/',
				handler: handler || null,
				status: status || null,
				title: title || ':)',
				express: express || function (ret) {
					ret.end();
				}
			});
		}
	}, {
		key: 'rxReact',
		value: function rxReact(layout) {
			layout['mixins'] = [];
			var Layout = React.createClass(layout);
			var reactElements = [rRouter.Router, {
				component: Layout
			}];
			this.routes.forEach(function (e) {
				reactElements.push(React.createElement(rRouter.Route, {
					path: e.path,
					component: e.handler
				}));
			});
			var routes = React.createElement.apply(React, reactElements);
			return routes;
		}
	}, {
		key: 'exec',
		value: function exec(template, Layout, config) {
			var router = express.Router();
			var mode = require('start' + 'mode');
			var browserify = require('browserify' + '-middleware');
			var appConfig = require('con' + 'figs')('application');
			router.use(config.browser.bundle || '/bundle.js', browserify('./.inless/browser.js', {
				transform: ["babelify", "require-globify"],
				stage: 0,
				debug: mode != 'production',
				precompile: mode == 'production',
				gzip: mode == 'production',
				minify: mode == 'production',
				cache: mode == 'production'
			}));
			var routes = this.rxReact(Layout);
			var preData = new _preData2['default'](this.routes);
			router.use(preData.router);
			router.use(function (request, response, next) {
				try {
					if (!request.__ret) {
						logger.warn(request.path);
						response.status(404);
						response.end('Not found 404');
						return;
					}

					var _ref = request.__ret || {};

					var req = _ref.req;
					var res = _ref.res;
					var status = _ref.status;

					var session = new _session2['default'](request.session.session);
					var relStatus = session.status;
					if (status < relStatus) {
						logger.warn(request.path);
						response.status(403);
						response.end('Error 403');
						return;
					}
					// logger.trace('==============');
					// logger.trace(request.path);
					// logger.trace(res.data);
					// logger.trace('==============');
					var dataId = preData.create(res.data);
					var url = request.url + '#' + dataId;
					rRouter.match({ routes: routes, location: url }, function (error, redirectLocation, renderProps) {
						if (error) {
							logger.error(error.message);
							response.end(500, 'Server error');
						} else if (redirectLocation) {
							response.redirect(302, redirectLocation.pathname + redirectLocation.search);
						} else if (renderProps) {
							request.session.session = req.session['export']();
							var content = ReactDOM.renderToString(React.createElement(rRouter.RoutingContext, renderProps));
							var xScript = (function () {
								var ret = '<script type="text/javascript" charset="utf-8">\n\tvar ___preData = ' + JSON.stringify(preData.remove(dataId)) + ';\n\tvar ___session = ' + JSON.stringify(req.session['export']()) + ';\n</script>\n<script type="text/javascript" charset="utf-8" src="' + (config.browser.bundle || '/bundle.js') + '"></script>\n';
								return ret;
							})();
							var xStyle = (function () {
								var ret = '<link rel="stylesheet" type="text/css" href="' + (appConfig.style.bundleUrl || '/bundle.css') + '"></link>';
								return ret;
							})();
							response.end(render(template, {
								title: res.title || '',
								rootSelector: appConfig.style.rootSelector ? appConfig.style.rootSelector.replace(/\.|\#/ig, '') : 'application',
								script: request.query['noscript'] ? '' : xScript,
								style: request.query['nostyle'] ? '' : xStyle,
								'yield': content || ''
							}));
						} else {
							response.end(404, 'Not found');
						}
					});
				} catch (e) {
					logger.error(e);
					res.end(500, '500 Internal server error');
				}
			});
			return router;
		}
	}]);

	return Router;
})();

module.exports = Router;

