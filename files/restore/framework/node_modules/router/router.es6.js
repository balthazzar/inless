
var express = typeof window == 'undefined' ? require('ex'+'press') : null;

var React = require('react');
var ReactDOM = require('react-dom/server');
var rRouter = require('react-router');

import Logger from 'logger';

var logger = Logger.getLogger('router');


import PreData from 'preData';

// import createBrowserHistory from 'history/lib/createBrowserHistory';


var render = function(layout, params) {
	var escapeHtml = function(text) {
		var map = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#039;'
		};
		return text.replace(/[&<>"']/g, function(m) { return map[m]; });
	}
	for(var _i in params) {
		var i = params[_i];
		layout = layout.split("%"+_i+"%").join(i);
		layout = layout.split("#"+_i+"#").join(escapeHtml(i));
	}
	return layout.replace(/(\n\s+)/gi, "").replace(/(\n)/gi, "");
};


class Router {
	constructor() {
		this.routes = [];
	}
	add(path, handler, status, title, express) {
		this.routes.push({
			path: path||'/',
			handler: handler||null,
			status: status||null,
			title: title||':)',
			express: express||function(ret) {ret.end()}
		});
	}
	rxReact(layout) {
		layout['mixins'] = [];
		var Layout = React.createClass(layout);
		var reactElements = [rRouter.Router, {
			component: Layout
		}];
		this.routes.forEach(function (e) {
			reactElements.push(React.createElement(rRouter.Route, {
				path: e.path,
				component: e.handler
			}));
		});
		var routes = React.createElement.apply(React, reactElements);
		return routes;
	}
	exec(template, Layout, config) {
		var router = express.Router();
		var mode = require('start'+'mode');
		var browserify = require('browserify'+'-middleware');
		var appConfig = require('con'+'figs')('application');
		// router.use('/api/session', (request, response, next)=> {
		// 	response.json(request.session);
		// });
		router.use(config.browser.bundle || '/bundle.js', browserify(
			'./framework/browser.js', {
			transform: [
				"babelify",
				"require-globify"
			],
			stage: 0,
			precompile: mode == 'production',
			gzip: mode == 'production',
			minify: mode == 'production',
			cache: mode == 'production'
		}));
		var routes = this.rxReact(Layout);
		var preData = new PreData(this.routes);
		router.use(preData.router);
		router.use((request, response, next)=> {
			try {
				if(!request.__ret) {
					logger.warn(request.path);
					response.status(404);
					response.end('Not found 404');
					return;
				}
				var {req, res, status} = request.__ret||{};
				var relStatus = request.session.account.status;
				if(status < relStatus) {
					logger.warn(request.path);
					response.status(403);
					response.end('Error 403');
					return;
				}
				// logger.trace('==============');
				// logger.trace(request.path);
				// logger.trace(res.data);
				// logger.trace('==============');
				var dataId = preData.create(res.data);
				var url = request.url + '#' + dataId;
				rRouter.match({ routes: routes, location: url }, function (error, redirectLocation, renderProps) {
					if (error) {
						logger.error(error.message);
						response.end(500, 'Server error');
					} else if (redirectLocation) {
						response.redirect(302, redirectLocation.pathname + redirectLocation.search);
					} else if (renderProps) {
						var content = ReactDOM.renderToString(
							React.createElement(rRouter.RoutingContext, renderProps)
						);
						var xScript = (function () {
							var ret = '<script>var ___preData = ' + (!request.query.script ? JSON.stringify(preData.remove(dataId)) : '{}') + ';\n\t\t\t\t\tvar ___session = ' + (!request.session ? '{}' : JSON.stringify(request.session)) + ';</script>\n\t\t\t\t\t<script type="text/javascript" charset="utf-8" src="' + (config.browser.bundle || '/bundle.js') + '"></script>';
							return ret;
						})();
						var xStyle = (function () {
							var ret = '\n\t\t\t\t\t<link rel="stylesheet" type="text/css" href="' + (appConfig.style.bundleUrl || '/bundle.css') + '"></link>\n\t\t\t\t\t';
							return ret;
						})();
						response.end(render(template, {
							title: res.title || '',
							rootSelector: appConfig.style.rootSelector ? appConfig.style.rootSelector.replace(/\.|\#/ig, '') : 'application',
							script: xScript,
							style: xStyle,
							'yield': content || ''
						}));
					} else {
						response.end(404, 'Not found');
					}
				});
			} catch(e) {
				logger.error(e);
				res.end('500 Internal server error');
			}
		});
		return router;
	}
}



module.exports = Router;
