

import crypto from 'crypto';
import configs from 'configs';
var server = configs('server');
var secret = server && server.session ? server.session.secret : '';


class Session {
	constructor(source) {
		var data = {
			id: null,
			status: null,
			data: {}
		};
		if(source) {
			var tmp = this.decrypt(source);
			data = tmp ? tmp : data;
		}
		this._data = data;
	}
	setData(name, value) {
		return this._data.data[name] = value;
	}
	setId(value) {
		return this._data.id = value;
	}
	setStatus(value) {
		return this._data.status = value;
	}
	decrypt(source, check = false) {
		var step4 = source;
		var step3 = source.split('#')[1];
		var step2 = source.split('#')[0];
		var Xstep3 = crypto.createHash('sha512').update(`${step2}#${secret}`).digest('hex');
		if(check && Xstep3 != step3) return false;
		var step1 = new Buffer(step2, 'base64').toString('ascii');
		return JSON.parse(step1);
	}
	encrypt(source) {
		var step1 = JSON.stringify(source);
		var step2 = new Buffer(step1).toString('base64');
		var step3 = crypto.createHash('sha512').update(`${step2}#${secret}`).digest('hex');
		var step4 = `${step2}#${step3}`;
		return step4;
	}
	export() {
		return this.encrypt(this._data);
	}
}


export default Session;

