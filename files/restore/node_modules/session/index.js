'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _configs = require('configs');

var _configs2 = _interopRequireDefault(_configs);

var server = (0, _configs2['default'])('server');
var secret = server && server.session ? server.session.secret : '';

var Session = (function () {
	function Session(source) {
		_classCallCheck(this, Session);

		var data = {
			id: null,
			status: null,
			data: {}
		};
		if (typeof window != 'undefined' && window.___session) {
			source = window.___session;
		}
		if (source) {
			var tmp = this.decrypt(source);
			data = tmp ? tmp : data;
		}
		this._data = data;
		this.id = data.id;
		this.status = data.status;
		this.data = data.data;
	}

	_createClass(Session, [{
		key: 'setData',
		value: function setData(name, value) {
			return this.data[name] = value;
		}
	}, {
		key: 'setId',
		value: function setId(value) {
			return this.id = value;
		}
	}, {
		key: 'setStatus',
		value: function setStatus(value) {
			return this.status = value;
		}
	}, {
		key: 'decrypt',
		value: function decrypt(source) {
			var check = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

			var step4 = source;
			var step3 = source.split('#')[1];
			var step2 = source.split('#')[0];
			var Xstep3 = _crypto2['default'].createHash('sha512').update(step2 + '#' + secret).digest('hex');
			if (check && Xstep3 != step3) return false;
			var step1 = new Buffer(step2, 'base64').toString('ascii');
			return JSON.parse(step1);
		}
	}, {
		key: 'encrypt',
		value: function encrypt(source) {
			var step1 = JSON.stringify(source);
			var step2 = new Buffer(step1).toString('base64');
			var step3 = _crypto2['default'].createHash('sha512').update(step2 + '#' + secret).digest('hex');
			var step4 = step2 + '#' + step3;
			return step4;
		}
	}, {
		key: 'export',
		value: function _export() {
			return this.encrypt({
				id: this.id,
				status: this.status,
				data: this.data
			});
		}
	}]);

	return Session;
})();

exports['default'] = Session;
module.exports = exports['default'];

