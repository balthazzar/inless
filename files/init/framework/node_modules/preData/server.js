'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _logger = require('logger');

var _logger2 = _interopRequireDefault(_logger);

var logger = _logger2['default'].getLogger('preData');

var Storage = require('./preDataStorage.js');

var url = require('url');
var pathToRegexp = require('path-to-regexp');

String.prototype.hashCode = function () {
	var hash = 0,
	    char;
	try {
		if (this.length == 0) return hash;
		for (var i = 0; i < this.length; i++) {
			char = this.charCodeAt(i);
			hash = (hash << 5) - hash + char;
			hash = hash & hash; // Convert to 32bit integer
		}
		return hash;
	} catch (e) {
		throw new Error('hashCode: ' + e);
	}
};

var Request = function Request(path, source) {
	var session = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	var body = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	var files = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

	var data = url.parse(source);
	var keys = [];
	var query = {};
	var id = source.hashCode();
	!data.query ? 0 : data.query.split('&').forEach(function (e) {
		try {
			var data = e.split('=');
			if (e.length > 0) {
				query[data[0]] = !data[1] ? null : !isNaN(parseFloat(data[1])) && isFinite(data[1]) ? parseFloat(data[1]) : decodeURIComponent(data[1]);
			}
		} catch (e) {}
	});
	var re = pathToRegexp(path, keys);
	var params = {};
	var tmp1 = re.exec(data.pathname);
	if (data.pathname !== '\/' && data.pathname !== '' && tmp1) {
		var preParams = re.exec(data.pathname).map(function (e) {
			return e;
		});
		for (var i = 1; i < preParams.length; i++) {
			var key = keys[i - 1].name,
			    val = preParams[i];
			params[key] = val;
		}
	}
	var req = {
		id: id,
		query: query,
		params: params,
		session: session,
		body: body,
		files: files,
		path: data.pathname,
		fullPath: data.path,
		queryString: data.query || ''
	};
	return req;
};

var Res = (function () {
	function Res(res, next, title) {
		_classCallCheck(this, Res);

		this.__res = res;
		this.__next = next;
		this.title = title;
		this.__data = {};
	}

	_createClass(Res, [{
		key: 'setData',
		value: function setData(name, data) {
			this.__data[name] = data;
			return this;
		}
	}, {
		key: 'end',
		value: function end(name) {
			this.__res.___res = this;
			this.__next();
		}
	}, {
		key: 'redirect',
		value: function redirect(url) {
			this.__res.redirect(url);
		}
	}, {
		key: 'data',
		get: function get() {
			return this.__data;
		}
	}]);

	return Res;
})();

var Response = function Response(res, next, title) {
	return new Res(res, next, title);
};

var selectRoute = function selectRoute(path, routes) {
	path = url.parse(path).pathname;
	return routes.filter(function (e) {
		var re = pathToRegexp(e.path);
		return !!re.exec(path);
	})[0] || null;
};

var PreData = (function () {
	function PreData(app, routes) {
		_classCallCheck(this, PreData);

		app.post('/preData', function (request, response, next) {
			var url = request.body.url;
			var body = {};
			var files = {};
			try {
				body = JSON.parse(request.body.body);
			} catch (e) {
				logger.error(e);
			}
			try {
				files = request.files;
			} catch (e) {
				logger.error(e);
			}
			if (request.___ret) return next();
			var route = selectRoute(url, routes);
			if (route) {
				var res, req;
				var _next = function _next() {
					response.json({
						preData: res.data,
						id: req.id
					});
				};
				req = Request(route.path, url, request.session, body, files);
				res = Response(response, _next, route.title);
				request.__ret = {
					req: req,
					res: res,
					status: route.status
				};
				route.express(req, res);
			} else {
				next();
			}
		});
		app.use('/preData', function (request, response, next) {
			var url = request.query.url;
			var body = {};
			try {
				body = JSON.parse(request.query.body);
			} catch (e) {
				logger.error(e);
			}
			if (request.___ret) return next();
			var route = selectRoute(url, routes);
			if (route) {
				var res, req;
				var _next = function _next() {
					response.json({
						preData: res.data,
						id: req.id
					});
				};
				req = Request(route.path, url, request.session, body);
				res = Response(response, _next, route.title);
				request.__ret = {
					req: req,
					res: res,
					status: route.status
				};
				route.express(req, res);
			} else {
				next();
			}
		});
		app.use(function (request, response, next) {
			if (request.___ret) return next();
			var route = selectRoute(request.originalUrl, routes);
			if (route) {
				var req = Request(route.path, request.originalUrl, request.session, request.body);
				var res = Response(response, next, route.title);
				request.__ret = {
					req: req,
					res: res,
					status: route.status
				};
				route.express(req, res);
			} else {
				next();
			}
		});
	}

	_createClass(PreData, [{
		key: 'create',
		value: function create() {
			var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

			var id = parseInt(Math.random().toString().substr(2)).toString(32);
			Storage[id] = data;
			return id;
		}
	}, {
		key: 'get',
		value: function get(id) {
			var data = Storage[id] || {};
			return data;
		}
	}, {
		key: 'remove',
		value: function remove(id) {
			var data = this.get(id);
			delete Storage[id];
			return data;
		}
	}]);

	return PreData;
})();

module.exports = PreData;
