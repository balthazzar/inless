

var React = require('react/addons');
var rRouter = require('react-router');
var Route = rRouter.Route;
var NotFoundRoute = rRouter.NotFoundRoute;

import Logger from 'logger';

var logger = Logger.getLogger('router');


import PreData from 'preData';


function escapeHtml(text) {
	var map = {
		'&': '&amp;',
		'<': '&lt;',
		'>': '&gt;',
		'"': '&quot;',
		"'": '&#039;'
	};
	return text.replace(/[&<>"']/g, function(m) { return map[m]; });
}

var render = function(layout, params) {
	for(var _i in params) {
		var i = params[_i];
		layout = layout.split("%"+_i+"%").join(i);
		layout = layout.split("#"+_i+"#").join(escapeHtml(i));
	}
	return layout.replace(/(\n\s+)/gi, "").replace(/(\n)/gi, "");
};


class Router {
	constructor() {
		this.routes = [];
	}
	add(path, handler, status, title, express) {
		this.routes.push({
			path: path||'/',
			handler: handler||null,
			status: status||null,
			title: title||':)',
			express: express||function(ret) {ret.end()}
		});
	}
	rxReact(Layout) {
		let reactElements = [Route, {handler: Layout, location: "history"}];
		this.routes.forEach((e)=> {
			reactElements.push(React.createElement(Route, {path: e.path, handler: e.handler}));
		});
		var routes = React.createElement.apply(React, reactElements);
		return routes;
	}
	exec(app, template, Layout, config) {
		var browserify = require('browserify'+'-middleware');
		app.use('/api/session', (request, response, next)=> {
			response.json(request.session);
		});
		app.use(config.browser.bundle || '/bundle.js', browserify(
			require('path').join('./application/', config.react.browser), {
			transform: [
				"babelify",
				"require-globify"
			],
			stage: 0,
			minify: !config.debug,
			cache: !config.debug
		}));
		var routes = this.rxReact(Layout);
		var preData = new PreData(app, this.routes);
		app.use((request, response, next)=> {
			if(!request.__ret) {
				logger.warn(request.path);
				response.status(404);
				response.end('Not found 404');
				return;
			}
			var {req, res, status} = request.__ret||{};
			var relStatus = request.session.account.status;
			if(status < relStatus) {
				logger.warn(request.path);
				response.status(403);
				response.end('Error 403');
				return;
			}
			logger.info(request.path);
			logger.info('==============');
			logger.info(res.data);
			logger.info('==============');
			var dataId = preData.create(res.data);
			var url = `${request.path}?dataId=${dataId}`;
			rRouter.run(routes, url, function (Root) {
				var content = React.renderToString(
					React.createElement(Root, null)
				);
				response.end(render(template, {
					title: res.title||'',
					preData: !request.query.script ? JSON.stringify(preData.remove(dataId)) : '{}',
					script: !request.query.script ? '' : '-tmp',
					style: !request.query.style ? '' : '-tmp',
					styleurl: config.style.bundle||'',
					scripturl: config.browser.bundle||'',
					session: !request.session ? '{}' : JSON.stringify(request.session),
					yield: content||''
				}));
			});
		});
		return app;
	}
}



module.exports = Router;
