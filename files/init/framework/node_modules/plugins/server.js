'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var list = require('./../../../configs/plugins.json');

var plugins = {};

var Session = require('./session.js');

var Plugin = (function () {
	function Plugin(parent) {
		var _this = this;

		_classCallCheck(this, Plugin);

		this.__parent = parent;
		this.sync = !!this.__parent.sync;

		var _loop = function (_name) {
			var body = _this.__parent[_name];
			if (typeof body == 'function') {
				_this[_name] = function (options, session) {
					return _this.exec(_name, options, session);
				};
			}
		};

		for (var _name in this.__parent) {
			_loop(_name);
		};
		this.getPlugin = function (name) {
			return plugins[name];
		};
	}

	_createClass(Plugin, [{
		key: 'exec',
		value: function exec() {
			var name = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

			var _this2 = this;

			var options = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
			var session = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

			if (this.sync) {
				return this.__parent[name].call(this.__parent, options);
			} else {
				if (session && !session['__isSession']) {
					session = new Session(session);
				}
				var promise = new Promise(function (resolve, reject) {
					if (_this2.__parent[name] != undefined) {
						_this2.__parent[name].call(_this2, options, session, resolve, reject);
					} else {
						reject('not found method');
					};
				});
				return promise;
			}
		}
	}]);

	return Plugin;
})();

list.forEach(function (e) {
	var tmpl = require('./../../../application/plugins/' + e + '/server.js');
	var rpc = require('./../../../application/plugins/' + e + '/client.js').rpc;
	tmpl['name'] = e;
	tmpl['rpc'] = rpc || [];
	var plugin = new Plugin(tmpl);
	plugins[e] = plugin;
});
list.forEach(function (e) {
	var init = plugins[e].__parent.init || function () {};
	var app = require('plugins/singleton.js').app;
	init.call(plugins[e], app);
});

var Singleton = plugins;

Singleton.__instance = null;

Singleton.__getInstance = function () {
	if (this.__instance === null) {
		this.__instance = Singleton;
	}
	return this.__instance;
};

module.exports = Singleton.__getInstance();
