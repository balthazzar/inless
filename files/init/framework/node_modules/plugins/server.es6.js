
var list = require('./../../../configs/plugins.json');

var plugins = {};

var Session = require('./session.js');


class Plugin {
	constructor(parent) {
		this.__parent = parent;
		this.sync = !!this.__parent.sync;
		for(let name in this.__parent) {
			let body = this.__parent[name];
			if(typeof body == 'function') {
				this[name] = (options, session)=> {
					return this.exec(name, options, session);
				};
			}
		};
		this.getPlugin = (name)=> {
			return plugins[name];
		}
	};
	exec(name=null, options=null, session = null) {
		if(this.sync) {
			return this.__parent[name].call(this.__parent, options);
		} else {
			if(session && !session['__isSession']) {
				session = new Session(session);
			}
			var promise = new Promise((resolve, reject)=> {
				if(this.__parent[name] != undefined) {
					this.__parent[name].call(this, options, session, resolve, reject);
				} else {
					reject('not found method');
				};
			});
			return promise;
		}
	};
}




list.forEach(function(e) {
	var tmpl = require('./../../../application/plugins/'+e+'/server.js');
	var rpc = require('./../../../application/plugins/'+e+'/client.js').rpc;
	tmpl['name'] = e;
	tmpl['rpc'] = rpc||[];
	var plugin = new Plugin(tmpl);
	plugins[e] = plugin;
});
list.forEach(function(e) {
	var init = plugins[e].__parent.init||function() {};
	var app = require('plugins/singleton.js').app;
	init.call(plugins[e], app);
});

var Singleton = plugins;

Singleton.__instance = null;

Singleton.__getInstance = function() {
	if(this.__instance === null) {
		this.__instance = Singleton;
	}
	return this.__instance;
}

module.exports = Singleton.__getInstance();
